//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

class type
{
   String type;
   String name;
   int tempno;
}

class infomethod
{
   String name;
   String rettype;
   int offset;
   int formals;
   Vector<type> vars;
   public infomethod()
   {
      vars = new Vector<type>();
      formals = 0;
   }
}

class infoclass
{
   String name;
   int methodno;
   Vector<type> variables;
   Vector<infomethod> methods;
   String parent;
   public infoclass()
   {
      variables = new Vector<type>();
      methods = new Vector<infomethod>();
      parent = null;
   }
}

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   Vector<infoclass> classes = new Vector<infoclass>();
   String currscope = "";
   String currclass = "";
   int pass = 1;

   Vector<type> tytmpm = new Vector<type>();
   Vector<type> tytmpc = new Vector<type>();
   Vector<infomethod> imtmp = new Vector<infomethod>();
   infoclass ctmp = new infoclass();
   infomethod mtmp = new infomethod();
   int metorcl = 0;   //1 if cl 2 if method 
   int pass2id = 0;   //if 1 it will be like var declaration int x or type declaration tree x or class id
   boolean ismethodvariable = false;         //becomes true for a class variable
   String isnew = "";                    //useful for new BBS().something, contains BBS
   String isthis = "";                   //useful for this.something, contains name of this class
   String classvret = "";
   String msgsnd = ""; 

   int tempnumber = 10;
   int labelnumber = 0;

   public void print()
   {
      for(int i=0;i<classes.size();i++)
      {
         System.out.println(classes.elementAt(i).name);
         System.out.println(classes.elementAt(i).methodno);
         if(classes.elementAt(i).parent!=null)
         {
            System.out.println("extends "+classes.elementAt(i).parent);
         }
         for(int j=0;j<classes.elementAt(i).variables.size();j++)
         {
            //System.out.println("HI");
            System.out.println("  "+classes.elementAt(i).variables.elementAt(j).type+" "+classes.elementAt(i).variables.elementAt(j).name+" "+classes.elementAt(i).variables.elementAt(j).tempno);
         }
         for(int j=0;j<classes.elementAt(i).methods.size();j++)
         {
            System.out.println("    "+classes.elementAt(i).methods.elementAt(j).rettype +" "+ classes.elementAt(i).methods.elementAt(j).name+" "+ classes.elementAt(i).methods.elementAt(j).offset+" "+ classes.elementAt(i).methods.elementAt(j).formals);
            for(int k=0; k<classes.elementAt(i).methods.elementAt(j).vars.size();k++)
            {
               System.out.println("       "+classes.elementAt(i).methods.elementAt(j).vars.elementAt(k).type+" "+classes.elementAt(i).methods.elementAt(j).vars.elementAt(k).name+" "+classes.elementAt(i).methods.elementAt(j).vars.elementAt(k).tempno);
            }
         }
      }
   }

   public void extendsSymbolTable()
   {
      for(int i=0;i<classes.size();i++)
      {
         if(classes.elementAt(i).parent!=null)
         {
            int j = 0;
            while(classes.elementAt(j).name!=classes.elementAt(i).parent)
            {
               j++;
            }
            int ms = classes.elementAt(j).methods.size();
            int vs = classes.elementAt(j).variables.size();
            for(int k = 0;k<classes.elementAt(i).methods.size();k++)
            {
               classes.elementAt(i).methods.elementAt(k).offset+=ms;
            }
            for(int k = 0;k<classes.elementAt(i).variables.size();k++)
            {
               classes.elementAt(i).variables.elementAt(k).tempno+=vs;
            }

            Vector<type> estt = (Vector)classes.elementAt(i).variables.clone();
            Vector<infomethod> estm = (Vector)classes.elementAt(i).methods.clone();

            classes.elementAt(i).variables.clear();
            classes.elementAt(i).methods.clear();

            classes.elementAt(i).variables = (Vector)classes.elementAt(j).variables.clone();
            for(type v : estt)
            {
               classes.elementAt(i).variables.add(v);
            }

            classes.elementAt(i).methods = (Vector)classes.elementAt(j).methods.clone();
            for(infomethod ifm : estm)
            {
               classes.elementAt(i).methods.add(ifm);
            }
         }
      }
   }

	public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            //String st = e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      extendsSymbolTable();
      //print();

      pass = 2;
      String r = "";
      String s1 = (String)n.f0.accept(this, argu);
      ArrayList<String> tys = new ArrayList<String>();
      String s2 = (String)n.f1.accept(this, (A)tys);
      if(s1!=null)
      {
         r += s1;
      }
      for(String ty : tys)
      {
         r+=ty;
      }
      n.f2.accept(this, argu);
      System.out.print(r);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      pass2id = 1;
      String s = (String)n.f1.accept(this, argu);
      pass2id = 0;
      String r;
      currscope = s;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      currscope = "main()";
      n.f7.accept(this, argu);
      n.f10.accept(this, argu);
      pass2id = 1;
      String s2 = (String)n.f11.accept(this, argu);
      pass2id = 0;
      if(pass==1)
      {
         infoclass main = new infoclass();
         main.name = s;
         main.methodno = 1;
         infomethod mn = new infomethod();
         mn.name = "main";
         mn.rettype = "void";
         mn.formals = 1;
         type ty = new type();
         ty.type = "String[]";
         ty.name = s2;
         ty.tempno = 1;
         mn.vars.add(ty);
         main.methods.add(mn);
         classes.add(main);
      }
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      ArrayList<String> stsm = new ArrayList<String>();
      n.f14.accept(this, (A)stsm);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      if(pass==2)
      {
         String r0="";
      
         for(String a: stsm)
         {
            r0+=a;
         }

         r = "MAIN\n"+r0;
         r += "END\n";
         _ret = (R)r;
      }
      currscope = "";
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=(R)"";
      ArrayList<String> tys = (ArrayList<String>)argu;
      n.f0.accept(this, (A)tys);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*   
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      pass2id = 1;
      String s = (String)n.f1.accept(this, argu);
      pass2id = 0;
      metorcl = 1;
      currscope = s;
      currclass = s;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      metorcl = 0;
      ArrayList<String> mts = new ArrayList<String>();
      n.f4.accept(this, (A)mts);
      
      //System.out.println(rt);
      n.f5.accept(this, argu);
      if(pass==1)
      {
         ctmp.name = s;
         ctmp.variables = (Vector)tytmpc.clone();
         //System.out.println(ctmp.variables);
         ctmp.methods = imtmp;
         classes.add(ctmp);
         //ctmp = null;
         tytmpc.clear();
         ctmp = new infoclass();
         imtmp = new Vector<infomethod>();
      }
      ArrayList<String> tys = (ArrayList<String>)argu;
      if(pass==2)
      {
         String rt="";
         for(String mt : mts) 
         {
            rt += mt;
         } 
         //System.out.println(rt);
         // if(rt==null)
         // {
         //    rt="";
         // }
         //System.out.println("I AM HERE "+rt);
         tys.add(rt);
         //_ret = (R)rt;
      }
      currscope = "";
      currclass = "";
      //System.out.println("I AM HERE "+_ret);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      pass2id = 1;
      String s = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s2 = (String)n.f3.accept(this, argu);
      pass2id = 0;
      currscope = s;
      currclass = s;
      n.f4.accept(this, argu);
      metorcl = 1;
      n.f5.accept(this, argu);
      metorcl = 0;
      ArrayList<String> mtse = new ArrayList<String>();
      n.f6.accept(this, (A)mtse);
      n.f7.accept(this, argu);
      if(pass==1)
      {
         ctmp.name = s;
         ctmp.parent = s2;
         ctmp.variables = (Vector)tytmpc.clone();
         //System.out.println(ctmp.variables);
         ctmp.methods = imtmp;
         classes.add(ctmp);
         //ctmp = null;
         tytmpc.clear();
         ctmp = new infoclass();
         imtmp = new Vector<infomethod>();
      }
      ArrayList<String> tys = (ArrayList<String>)argu;
      if(pass==2)
      {
         String rt = "";
         for(String mt : mtse)
         {
            rt+=mt;
         }
         tys.add(rt);
      }
      currscope = "";
      currclass = "";
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      pass2id = 1;
      String t = (String)n.f0.accept(this, argu);
      String s = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      pass2id = 0;
      if(pass==1)
      {
         if(metorcl == 1)
         {
            //System.out.println("HERE");
            int i = tytmpc.size();
            type ty = new type();
            ty.type = t;
            ty.name = s;
            ty.tempno = i;
            tytmpc.add(ty);
         }
         if(metorcl == 2)
         {
            type ty = new type();
            ty.type = t;
            ty.name = s;
            ty.tempno = ++tempnumber;
            tytmpm.add(ty);
         }
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      ArrayList<String> mts = (ArrayList<String>)argu;
      n.f0.accept(this, argu);
      pass2id=1;
      String rt = (String)n.f1.accept(this, argu);
      //pass2id = 1;
      String s = (String)n.f2.accept(this, argu);
      pass2id = 0;
      currscope = s;
      n.f3.accept(this, argu);
      metorcl = 2;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      ArrayList<String> sts = new ArrayList<String>();
      n.f8.accept(this, (A)sts);
      n.f9.accept(this, argu);
      String s2 = (String)n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      if(pass==1)
      {
         mtmp.name = s;
         mtmp.rettype = rt;
         mtmp.vars = (Vector)tytmpm.clone();
         mtmp.offset = ctmp.methodno++;
         imtmp.add(mtmp);
         mtmp = new infomethod();
         tytmpm.clear();
      }
      if(pass==2)
      {
         int i = 0;
         int m = 0;
         while(classes.elementAt(i).name!=currclass)
         {
            i++;
         }
         while(classes.elementAt(i).methods.elementAt(m).name!=s)
         {
            m++;
         }

         int tmp = classes.elementAt(i).methods.elementAt(m).formals+1;

         // if(s==null)
         // {
         //    s=="";
         // }
         // if(s2==null)
         // {
         //    s2="";
         // }

         //System.out.println("I AM HERE "+tmp);

         String s1="";
         for(String t:sts)
         {
            s1+=t;
         }
         String r = "";
         r+=currclass+"_"+s+" ["+tmp+"]\n";
         r+="BEGIN\n";
         r+=s1;
         r+="RETURN "+s2+"\n";
         r+="END\n";
         mts.add(r);
      }
      metorcl = 0;
      currscope = "";
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      pass2id = 1;
      String t = (String)n.f0.accept(this, argu);
      String s = (String)n.f1.accept(this, argu);
      pass2id = 0;
      if(pass==1)
      {
         mtmp.formals++;
         type ty = new type();
         ty.type = t;
         ty.name = s;
         ty.tempno = mtmp.formals;
         tytmpm.add(ty);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=n.f0.accept(this, argu);;
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(pass==1)
      {
         _ret = (R)"int[]";
      }
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      if(pass==1)
      {
         _ret = (R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      if(pass==1)
      {
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=(R)"";
         ArrayList<String> sts = (ArrayList<String>)argu;
         n.f0.accept(this, (A)sts);
      
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=(R)"";
      n.f0.accept(this, argu);
      ArrayList<String> sts = (ArrayList<String>)argu;
      n.f1.accept(this, (A)sts);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */
      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      boolean tmp = ismethodvariable;
      String s3 = classvret;
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ArrayList<String> sts = (ArrayList<String>)argu;
      if(pass==2)
      {
         // if(s1==null)
         // {
         //    s1="";
         // }
         // if(s2==null)
         // {
         //    s2="";
         // }
         
            if(tmp)
            {
               String s = "";
               s+=" MOVE "+s1+" "+s2+" ";

               sts.add(s);
            }
            else
            {
               String s = "";
               s+=" HSTORE "+s3+" 0 "+s2+" ";

            //_ret = (R)s;
               sts.add(s);
            }
         
         
      }
      ismethodvariable = false;
      classvret = "";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      ArrayList<String> sts = (ArrayList<String>)argu;
      String s1 = (String)n.f0.accept(this, argu);
      boolean tmp = ismethodvariable;
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s3 = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(pass==2)
      {
         if(tmp)
         {
            int t1 = ++tempnumber;
            int t2 = ++tempnumber;

            String s = "";
            s+=" MOVE TEMP "+t1+" "+s1+"\n";
            s+="HSTORE PLUS TEMP "+t1+"\n";
            s+="BEGIN\n";
            s+="MOVE TEMP "+t2+" TIMES 4 "+s2+"\n";
            s+="RETURN PLUS 4 TEMP "+t2+" \n";
            s+="END\n";
            s+="0 \n"+s3+"\n";
            sts.add(s);
         }
         else
         {
            int t1 = ++tempnumber;
            int t2 = ++tempnumber;

            String s = "";
            s+=" HLOAD TEMP "+t1+" "+classvret+" 0\n";
            s+="HSTORE PLUS TEMP "+t1+"\n";
            s+="BEGIN\n";
            s+="MOVE TEMP "+t2+" TIMES 4 "+s2+"\n";
            s+="RETURN PLUS 4 TEMP "+t2+" \n";
            s+="END\n";
            s+="0 \n"+s3+"\n";
            sts.add(s);
         }
      }
      ismethodvariable = false;
      classvret = "";
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=(R)"";
      ArrayList<String> sts = (ArrayList<String>)argu;
      n.f0.accept(this, (A)sts);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ArrayList<String> stif = new ArrayList<String>();
      n.f4.accept(this, (A)stif);
      ArrayList<String> sts = (ArrayList<String>)argu;
      if(pass==2)
      {
         // if(s1==null)
         // {
         //    s1="";
         // }
         // if(s2==null)
         // {
         //    s2="";
         // }
         int l = ++labelnumber;
         String s2 = "";
         for(String a : stif)
         {
            s2+=a;
         }
         String s = "";
         s+= "CJUMP "+s1+" L"+l+"\n";
         s+= s2;
         s+= "L"+l+"\nNOOP\n";

         //System.out.print(s);

         //_ret = (R)s;
         sts.add(s);
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ArrayList<String> stife = new ArrayList<String>();
      n.f4.accept(this, (A)stife);
      n.f5.accept(this, argu);
      ArrayList<String> stief = new ArrayList<String>();
      n.f6.accept(this, (A)stief);
      ArrayList<String> sts = (ArrayList<String>)argu;
      if(pass==2)
      {
         // if(s1==null)
         // {
         //    s1="";
         // }
         // if(s2==null)
         // {
         //    s2="";
         // }
         // if(s3==null)
         // {
         //    s3="";
         // }
         int l1 = ++labelnumber;
         int l2 = ++labelnumber;

         String s2="NOOP \n";
         for(String a:stife)
         {
            s2+=a;
         }
         String s3="NOOP \n";
         for(String b:stief)
         {
            s3+=b;
         }

         String s = "";
         s+= "CJUMP "+s1+" L"+l1+"\n";
         s+= s2;
         s+= "JUMP L"+l2+"\n";
         s+= "L"+l1+"\n";
         s+= s3;
         s+= "L"+l2+"\n";
         s+= "NOOP\n";

         //System.out.print(s);
         sts.add(s);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s1 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ArrayList<String> stw = new ArrayList<String>();
      n.f4.accept(this, (A)stw);
      ArrayList<String> sts = (ArrayList<String>)argu;
      if(pass==2)
      {
         // if(s1==null)
         // {
         //    s1="";
         // }
         // if(s2==null)
         // {
         //    s2="";
         // }
         int l1 = ++labelnumber;
         int l2 = ++labelnumber;

         String s2 = "";
         for(String a : stw)
         {
            s2+=a;
         }

         String s = "";
         s+= "L"+l1+"\n";
         s+= "CJUMP "+s1+" L"+l2+"\n";
         s+= s2;
         s+= "JUMP L"+l1+"\n";
         s+= "L"+l2+"\n";
         s+= "NOOP\n";

         sts.add(s);
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(pass==2)
      {
         String r = "PRINT "+s; 
         
         ArrayList<String> sts = (ArrayList<String>)argu;
         sts.add(r);
         
         //System.out.print(r);
      }  
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      _ret = n.f0.accept(this, argu);
      if(pass==1)
      {
         _ret = null;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);

      if(pass==2)
      {
         int tmp = ++tempnumber;
         int lt = ++labelnumber;
         int lf = ++labelnumber;

         String s = "";
         s+= "\nBEGIN\n";
         s+= "MOVE TEMP "+tmp+" 1\n";
         s+= "CJUMP "+s1+" L"+lf+"\n";
         s+= "CJUMP "+s2+" L"+lf+"\n";
         s+= "JUMP L"+lt+"\n";
         s+= "L"+lf+"\n";
         s+= "MOVE TEMP "+tmp+" 0\n";
         s+= "L"+lt+"\n";
         s+= "NOOP\n";
         s+= "RETURN TEMP "+tmp+" \n";
         s+= "END\n";

         //System.out.print(s);

         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);

      if(pass==2)
      {
         int tmp = ++tempnumber;
         int l1 = ++labelnumber;
         int l2 = ++labelnumber;
         int l3 = ++labelnumber;

         String s = "";
         s+= "\nBEGIN\n";
         s+= "MOVE TEMP "+tmp+" 1\n";
         s+= "CJUMP "+s1+" L"+l1+"\n";
         s+= "JUMP L"+l3+"\n";
         s+= "L"+l1+"\n";
         s+= "CJUMP "+s2+" L"+l2+"\n";
         s+= "JUMP L"+l3+"\n";
         s+= "L"+l2+"\n";
         s+= "MOVE TEMP "+tmp+" 0\n";
         s+= "L"+l3+"\n";
         s+= "NOOP\n";
         s+= "RETURN TEMP "+tmp+" \n";
         s+= "End\n";

         //System.out.print(s);

         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = "LE "+s1+" "+s2;
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = "NE "+s1+" "+s2;
         //System.out.println(s);
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = "PLUS "+s1+" "+s2;
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = "MINUS "+s1+" "+s2;
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = "TIMES "+s1+" "+s2;
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = "DIV "+s1+" "+s2;
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(pass==2)
      {
         int t1 = ++tempnumber;
         int t2 = ++tempnumber;
         int t3 = ++tempnumber;

         String s = "";
         s+="\nBEGIN\n";
         s+="MOVE TEMP "+t1+" "+s1+"\n";
         s+="HLOAD TEMP "+t2+" PLUS TEMP "+t1+" PLUS \n";
         s+="BEGIN\n";
         s+="MOVE TEMP "+t3+"TIMES 4 "+s2+"\n";
         s+="RETURN TEMP "+t3+"\n";
         s+="END\n";
         s+="4 0\n RETURN TEMP "+t2+"\n";
         s+="END\n";

         _ret = (R)s;

      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(pass==2)
      {
         int t1 = ++tempnumber;
         int t2 = ++tempnumber;

         String s="";
         s+="\nBEGIN\n";
         s+="MOVE TEMP "+t1+" "+s1+"\n";
         s+="HLOAD TEMP "+t2+" TEMP "+t1+" 0\n";
         s+="RETURN TEMP "+t2+"\n";
         s+="END\n";

         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      isnew = "";
      isthis = "";
      msgsnd = "";
      String s1 = (String)n.f0.accept(this, argu);
      String mstmp = msgsnd;
      String new1 = isnew;
      String this1 = isthis;
      n.f1.accept(this, argu);
      pass2id = 1;
      String s2 = (String)n.f2.accept(this, argu);
      pass2id = 0;
      n.f3.accept(this, argu);
      if(pass==1)
      {
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      

      if(pass==2)
      {
         int t1 = ++tempnumber;
         int t2 = ++tempnumber;
         int t3 = ++tempnumber;
         int t4 = ++tempnumber;
         
         String curr = "";                 //current class to check
         if(new1!="")
         {
            curr = isnew;
         }
         else if(this1!="")
         {
            curr = isthis;
         }
         else                      //find s1
         {
            int i = 0;
            int m = 0;
            while(classes.elementAt(i).name!=currclass)
            {
               i++;
            }
            int tmp = 0;
            if(currscope!=currclass)
            {
               while(classes.elementAt(i).methods.elementAt(m).name!=currscope)
               {
                  m++;
               }
            }
            for(int k=classes.elementAt(i).methods.elementAt(m).vars.size()-1;k>=0;k--)
            {
               if(classes.elementAt(i).methods.elementAt(m).vars.elementAt(k).name==mstmp)
               {
                  tmp = k;
                  ismethodvariable = true;
               }
            }
            if(ismethodvariable)
            {
               curr = classes.elementAt(i).methods.elementAt(m).vars.elementAt(tmp).type;
            }
            else
            {
               for(int j=0; j<classes.elementAt(i).variables.size();j++)
               {
                  if(classes.elementAt(i).variables.elementAt(j).name==mstmp)
                  {
                     tmp = j;
                  }
               }
               curr = classes.elementAt(i).variables.elementAt(tmp).type;
            }
            ismethodvariable = false;
            
         }

         int i = 0;
         //i = 0;
         int j = 0;
         //try{
         while(classes.elementAt(i).name!=curr)
         {
            i++;
         }
         //try{
         while(classes.elementAt(i).methods.elementAt(j).name!=s2)
         {
            j++;
         }
         //}
         //catch(Exception e){System.out.println("msgsnd= "+mstmp+" s2= "+s2+" i= "+i+" j= "+j+" scope = "+currscope+" class = "+currclass+" curr = "+curr);}

         int tmp = 0;
         //tmp = 0;
         //try{
         tmp = classes.elementAt(i).methods.elementAt(j).offset;                                 
         //}
         //catch(Exception e){System.out.println("HI");}
         //tmp++;

         ArrayList<String> expr = new ArrayList<String>();
         n.f4.accept(this, (A)expr);
         n.f5.accept(this, argu);

         String s3 = "";

         for(String a : expr)
         {
            s3+=a+" ";
         }
         String s = "";
         s+="\nBEGIN\n";
         s+="MOVE TEMP "+t1+" "+s1+"\n";
         s+="HLOAD TEMP "+t2+" TEMP "+t1+" 0\n";
         s+="MOVE TEMP "+t3+" CALL\n";
         s+="BEGIN\n";
         s+="HLOAD TEMP "+t4+" PLUS TEMP "+t2+" TIMES "+tmp+" 4 0\n";
         s+="RETURN TEMP "+t4+"\n";
         s+="END\n";
         s+="( TEMP "+t1+" "+s3+" )\n";
         s+="RETURN TEMP "+t3+"\n";
         s+="END\n";

         _ret = (R)s;
      }
      isnew = "";
      isthis = "";
      msgsnd = "";

      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      ArrayList<String> expr = (ArrayList<String>)argu;
      String s1 = (String)n.f0.accept(this, argu);
      if(pass==2)
      {
         // if(s2==null)
         // {
         //    s2="";
         // }
         // String s = "";                    //chance of null?
         // s+=s1+" "+s2;
         expr.add(s1);

         //_ret = (R)s;
      }
      String s2 = (String)n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      ArrayList<String> expr = (ArrayList<String>)argu;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      if(pass==2)
      {
         // if(s2==null)
         // {
         //    s2="";
         // }
         // String s = "";                      //chance of null?
         // s+=s1+" "+s2;
         expr.add((String)_ret);

         //_ret = (R)s;
      }
      if(_ret==null)
      {
         _ret=(R)"";
      }
      
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      _ret = n.f0.accept(this, argu);
      if(pass==1)
      {
         return null;
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      _ret = n.f0.accept(this, argu);
      //System.out.println(_ret);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      if(pass==2)
      {
         _ret = (R)"1";
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      if(pass==2)
      {
         _ret = (R)"0";
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      String s = (String)n.f0.accept(this, argu);
      msgsnd = s;
      _ret = (R)s;
      if(pass==2 && pass2id!=1)
      {
         int i = 0;
         int m = 0;
         while(classes.elementAt(i).name!=currclass)
         {
            i++;
         }
         int tmp = 0;
         if(currscope!=currclass)
         {
            //try{
            while(classes.elementAt(i).methods.elementAt(m).name!=currscope)
            {
               m++;
            }
            //}
            //catch(Exception e){System.out.println(s+" is id "+i+" "+m+" "+currscope+" "+currclass);}
         }
         ismethodvariable = false;
         //try{
         for(int k=0;k<classes.elementAt(i).methods.elementAt(m).vars.size();k++)
         {
            if(classes.elementAt(i).methods.elementAt(m).vars.elementAt(k).name==s)
            {
               tmp = k;
               ismethodvariable = true;
            }
         }
         //}
         //catch(Exception e){System.out.println("from 2nd call "+s+" is id "+i+" "+m+" "+currscope+" "+currclass);}
         
         if(ismethodvariable)
         {
            String r = "";
            r+= "TEMP "+classes.elementAt(i).methods.elementAt(m).vars.elementAt(tmp).tempno+" ";

            _ret = (R)r;
         }
         else
         {
            for(int j=0; j<classes.elementAt(i).variables.size();j++)
            {
               if(classes.elementAt(i).variables.elementAt(j).name==s)
               {
                  tmp = j;
                  break;
               }
            }

            int t1 = ++tempnumber;
            int t2 = ++tempnumber;
            int no = classes.elementAt(i).variables.elementAt(tmp).tempno;
            no++;
            // if(s=="x")
            // {
            //    System.out.println(no);
            //    System.out.println(tmp);
            //    System.out.println(i);
            // }

            String r = "";
            String r0 = "";
            r0+="\nBEGIN\n";
            r0+="MOVE TEMP "+t2+" PLUS TEMP 0 TIMES 4 "+no+"\n";
            r0+="RETURN TEMP "+t2+"\nEND\n";
            classvret = r0;

            r+="\nBEGIN\n";
            r+="HLOAD TEMP "+t1;
            r+=r0;
            r+="0\n RETURN TEMP "+t1+"\n";
            r+="END\n";

            _ret = (R)r;
         }
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      if(pass==2)
      {
         _ret = (R)"TEMP 0";
      }
      isthis = currclass;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s = (String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(pass==2)
      {
         int t1 = ++tempnumber;
         int t2 = ++tempnumber;
         int t3 = ++tempnumber;
         int l1 = ++labelnumber;
         int l2 = ++labelnumber;

         String r = "";
         r+="\nBEGIN\n";
         r+="MOVE TEMP "+t1+" "+s+"\n";
         r+="MOVE TEMP "+t2+" HALLOCATE TIMES PLUS TEMP "+t1+" 1 4\n";
         r+="MOVE TEMP "+t3+" 4\n";
         r+="L"+l1+"\n";
         r+="CJUMP LE TEMP "+t3+" MINUS TIMES PLUS TEMP "+t1+" 1 4 1 L"+l2+"\n";
         r+="HSTORE PLUS TEMP "+t2+" TEMP "+t3+" 0 0\n";
         r+="MOVE TEMP "+t3+" PLUS TEMP "+t3+" 4\n";
         r+="JUMP L"+l1+"\n";
         r+="L"+l2+"\n";
         r+="HSTORE TEMP "+t2+" 0 TEMP "+t1+"\n";
         r+="RETURN TEMP "+t2+"\n";
         r+="END\n";

         _ret = (R)r;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      pass2id = 1;
      String s = (String)n.f1.accept(this, argu);
      pass2id = 0;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      isnew = s;
      if(pass==2)
      {
         int i = 0;
         while(classes.elementAt(i).name!=s)
         {
            i++;
         }
         int m = classes.elementAt(i).methods.size();
         int v = classes.elementAt(i).variables.size();
         m = m*4;
         v = (v+1)*4;

         int t1 = ++tempnumber;
         int t2 = ++tempnumber;

         String r = "";
         r+="BEGIN\n";
         r+="MOVE TEMP "+t1+" HALLOCATE "+m+"\n";
         r+="MOVE TEMP "+t2+" HALLOCATE "+v+"\n";
         for(int j=0;j<m;j+=4)
         {
            String method = s+"_"+classes.elementAt(i).methods.elementAt(j/4).name;
            r+="HSTORE TEMP "+t1+" "+j+" "+method+"\n";
         }
         int tmp = t2;
         for(int k = 4;k<v;k+=4)
         {
            r+="HSTORE PLUS TEMP "+t2+" "+k+" 0 0\n";
         }
         r+="HSTORE TEMP "+tmp+" 0 TEMP "+t1+"\n";
         r+="RETURN TEMP "+tmp+"\n";
         r+="END\n";

         _ret = (R)r;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      String s1 = (String)n.f1.accept(this, argu);
      if(pass==2)
      {
         int t = ++tempnumber;
         int l = ++labelnumber;

         String s = "";
         s+="BEGIN\n";
         s+="MOVE TEMP "+t+" 1\n";
         s+="CJUMP "+s1+ " L"+l+"\n";
         s+="MOVE TEMP "+t+" 0\n";
         s+="L"+l+"\n";
         s+="NOOP\n";
         s+="RETURN TEMP "+t+"\n";
         s+="END\n";

         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=(R)"";
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(pass==2)
      {
         String s = (String)_ret;
         s+="\n";
         _ret = (R)s;
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=(R)"";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
}