//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {

   boolean flag = false;
   //
   // Auto class visitors--probably don't need to be overridden.
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   Stack<String> currscope = new Stack<String>();
   HashMap<String,HashSet<String>> scopemap = new HashMap<String,HashSet<String>>();
   HashMap<String,String> symbolTable = new HashMap<String,String>();
   //HashMap<String,ArrayList<String>> func = new HashMap<String,ArrayList<String>>();
   HashMap<String,String> inheritance = new HashMap<String,String>(); 
   HashMap<String,String> fxn = new HashMap<String,String>();

   boolean isid = true;
   Stack<String> lst = new Stack<String>();

   public void error()
   {
      System.out.println("Type error");
      System.exit(0);
   }

   public String getCurrScope()
   {
      String ans = "";
      for(String s : currscope)
      {
         ans+= ans =  ":" + s;   
      }
      return ans;
   }

   public void Scope(String s)
   {
      currscope.add(s);
      if(!scopemap.containsKey(getCurrScope())) 
      {
         HashSet<String> Hs = new HashSet<String>();
         scopemap.put(getCurrScope(),Hs);
      }
   }

   public void endScope()
   {
      currscope.pop();
   }

   public void addV(String t,String id)
   {
      String s = getCurrScope();

      if(scopemap.get(s).contains(id))
      {
         error();
      }
      else
      {
         scopemap.get(s).add(id);
      }
      if(symbolTable.containsKey(s+":"+id))
      {
         //error();
      }
      else
      {
         symbolTable.put(s+":"+id,t);
      }
   }

   public void checkcycles()
   {
      ArrayList<String> arr = new ArrayList<>(inheritance.keySet());
      for(String S : arr)
      {
         if(dfsCycle(S))
         {
            error();
         }
      }
   }

   public boolean dfsCycle(String s)
   {
      HashSet<String> Hs = new HashSet<String>();
      String str = new String(s);
      while(true)
      {
         if(Hs.contains(str))
         {
            return true;
         }
         else
         {
            Hs.add(str);
         }
         if(inheritance.containsKey(str))
         {
            str = inheritance.get(str);
         }
         else
         {
            return false;
         }
      }
   }

   public void Parent(String p,String c)
   {
      if(inheritance.containsKey(c))
      {
         error();
      }
      else
      {
         inheritance.put(p,c);
      }
   }

   public boolean isTypeSame(String s1,String s2)
   {
      String s = new String(s2);
      while(true)
      {
         if(s==s1)
         {
            return true;
         }
         else if(inheritance.containsKey(s))
         {
            s=inheritance.get(s);
         }
         else
         {
            return false;
         }
      }
   }

   public void isInheritated(String s)
   {
      if(!inheritance.containsKey(s))
      {
         error();
      }
   }

   public String getClass(String id, String str)
   {
	   while(true)
      {
         String tmp = new String();
		   if(scopemap.get(str).contains(id))
         {
			   return str;
         }
         else
         {
            tmp = str.substring(str.lastIndexOf(':')+1);
            if(!inheritance.containsKey(tmp))
            {
               return "";
            }
         }
		   str = ":Global:" + inheritance.get(tmp);
	   }
   }

   public String getType(String str, String id)
   {
	   while(true)
      {
         String tmp = new String();
         //System.out.println(scopemap);
         //System.out.println(str);
         //System.out.println(id);
         //System.out.println(symbolTable);
		   if(scopemap.get(str).contains(id))
         {
            //System.out.println(scopemap);

			   return symbolTable.get(str+":"+id);
         }
         else
         {
            tmp = str.substring(str.lastIndexOf(':')+1);
            if(!inheritance.containsKey(tmp))
            {
               return "";
            }
         }
		   str = ":Global:" + inheritance.get(tmp);
	   }
   }
   
   public String getTypeOfId(String id)
   {
      String str = new String();
      boolean br = false;
      for(String s : currscope)
      {
         str = str+":"+s;
         String tmp = getType(str,id);
         if(tmp!="")
         {
            br = true;
            return tmp;
         }
      }
      if(!br)
      {
         error();
      }
      return "";
   }

   public void checkId(String s)
   {
      // System.out.println("IN checkid"+s);
      // System.out.println(scopemap);
      // if(scopemap.containsKey(":Global"))
      // {
      //    System.out.println("abcd");
      // }
      if(!scopemap.get(":Global").contains(s))
      {
         //System.out.println("eroring here");
         error();
      }
   }

   public void checkMethod(String s,String type)
   {
      String cls = new String(); 
      if(inheritance.containsKey(currscope.get(1)))
      {
         cls = inheritance.get(scopemap.get(1));

         String tmp = getType(s+"()", ":Global:" + cls);
         if(tmp != "")
         {
            if(type != tmp)
            {
               error();
            }
            String fn_class = getClass(s+"()", ":Global:" + cls);
            String fn_params =  fxn.get(fn_class + ":" + s +"()");

               
            if(fn_params != fxn.get(getCurrScope() + ":" + s +"()"))
            {
               error();
            }
         }
      }
   }

   public R checkMsgSnd(String s1, String s2, String s3)
   {
      if(!scopemap.get(":Global:").contains(s1))
      {
         error();
      }    	  
    	R _ret = (R) getType(s2+"()", ":Global:"+s1);
    	if(_ret == "")
      {
    		error();
      }

      String cls = getClass(s2+"()", ":Global:"+s1);
    	if(cls == "")
      {
         error();
      }
    	  
    	String[] params = fxn.get(cls + ":" + s2 + "()").split(",");
    	String[] expr_params = s3.split(",");
    	  
    	if(params.length != expr_params.length)
      {
         error();
      }
    	  
    	for(int i=0; i< params.length; i++ )
      {
    		if(!isTypeSame(params[i], expr_params[i]))
         {
    			error();
         }  
      }

      return _ret;   
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      Scope("Global");
      lst.push("");
      R _ret=null;

      //System.out.println("HERE");
      
      String m = (String)n.f0.accept(this, argu);
      //addV("MainClass",m);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      endScope();

      flag = true;

      Scope("Global");
      //System.out.println("HERE 2");
      checkcycles();
      //System.out.println("HERE 3");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      endScope();

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) 
   {
      //System.out.println("HEREME");
      n.f0.accept(this, argu);
      //System.out.println("HEREME 2");
      String s = (String)n.f1.accept(this, argu);
      //System.out.println("HEREME 3"+s);
      if(!flag)
      {
         addV("class",s);
         addV("void","main()");
      }
      System.out.println("HEREME 4"+s);

      R _ret=null;
      Scope(s);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      String str = (String)n.f11.accept(this, argu);
      if(!flag)
      {
         addV("String[]",str);
         fxn.put(getCurrScope(),"String[]");
      }
      //System.out.println("HEREME 3"+str);
      n.f12.accept(this, argu);
      //System.out.println("HEREME 4");
      Scope("main()");
      //System.out.println("HEREME 5");
      n.f13.accept(this, argu);
      //System.out.println("HEREME 7");
      //System.out.println("HEREME");
      n.f14.accept(this, argu);
      //System.out.println("HEREME 3");
      n.f15.accept(this, argu);
      endScope();
      n.f16.accept(this, argu);
      endScope();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) 
   {

      R _ret=null;
      n.f0.accept(this, argu);
      String s =(String) n.f1.accept(this, argu);
      if(!flag)
      {
         addV("class",s);
      }
      Scope(s);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      endScope();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) 
   {

      R _ret=null;
      n.f0.accept(this, argu);
      String s=(String)n.f1.accept(this, argu);
      if(!flag)
      {
         addV("class",s);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(!flag)
      {
         Parent(s,(String)n.f3.accept(this, argu));
      }
      else
      {
         isInheritated((String)n.f3.accept(this, argu));
      }
      n.f4.accept(this, argu);
      Scope(s);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      endScope();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu)     
   {
      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      String s = (String)n.f1.accept(this, argu);
      if(!flag)
      {
         addV(type,s);
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      String type = (String)n.f1.accept(this, argu);
      String s = (String)n.f2.accept(this, argu);
      if(!flag)
      {
         addV(type,s+"()");
      }
      else
      {
         checkMethod(s,type);
      }
      Scope(s);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!flag)
      {
         fxn.put(getCurrScope(),lst.peek());
      }
      String a = "";
      lst.push(a);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String r = (String)n.f10.accept(this, argu);
      if(flag)
      {
         if(!isTypeSame(r,type))
         {
            error();
         }
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      endScope();
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) 
   {
      R _ret=null;
      String type = (String)n.f0.accept(this, argu);
      String s = (String)n.f1.accept(this, argu);
      if(!flag)
      {
         addV(type,s);
      }
      String tmp = lst.peek() + type;
      lst.pop();
      lst.push(tmp);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String tmp = lst.peek() + ",";
      lst.pop();
      lst.push(tmp);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) 
   {
      isid = false;
      R _ret = n.f0.accept(this, argu);
      isid = true;
      
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) 
   {
      R _ret = (R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) 
   {
      R _ret= (R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) 
   {
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(flag)
      {
         if(!isTypeSame((String)n.f0.accept(this, argu),(String)n.f2.accept(this, argu)))
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int[]" || (String)n.f2.accept(this, argu)!="int" || (String)n.f5.accept(this, argu)!="int")
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(flag)
      {
         if((String)n.f2.accept(this, argu)!="boolean")
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      if(flag)
      {
         if((String)n.f2.accept(this, argu)!="boolean")
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(flag)
      {
         if((String)n.f2.accept(this, argu)!="boolean")
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) 
   {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(flag)
      {
         if((String)n.f2.accept(this, argu)!="int")
         {
            //System.out.println("Here to error"+s);
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="boolean" || (String)n.f2.accept(this, argu)!="boolean")
         {
            error();
         }
         _ret = (R)"boolean";
      }


      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="boolean" || (String)n.f2.accept(this, argu)!="boolean")
         {
            error();
         }
         _ret = (R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int" || (String)n.f2.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int" || (String)n.f2.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"boolean";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int" || (String)n.f2.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int" || (String)n.f2.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int" || (String)n.f2.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int" || (String)n.f2.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int[]" || (String)n.f3.accept(this, argu)!="int")
         {
            error();
         }
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(flag)
      {
         if((String)n.f0.accept(this, argu)!="int[]")
         {
            error();
         }
         _ret = (R)"int";
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) 
   {
      R _ret=null;
      String s1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String s3 = (String)n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      if(flag)
      {
         _ret = checkMsgSnd(s1,s2,s3);
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) 
   {
      R _ret=null;
      String s = (String)n.f0.accept(this, argu);
      String tmp = lst.peek()+s;
      _ret = (R)tmp;
      lst.pop();
      lst.push(tmp);
      lst.push("");
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = (String)n.f1.accept(this, argu);
      String tmp = lst.peek() + "," + s;
      lst.pop();
      lst.push(tmp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) 
   {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) 
   {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) 
   {
      String s = (String) n.f0.accept(this, argu);
      R _ret = (R)s;
      if(isid==false)
      {
         if(flag) 
         {
            checkId(s);
         }
         return _ret;
      }

      if(flag)
      {
         String t = getTypeOfId(s);
         if(t=="")
         {
            //System.out.println("Got out");
            error(); 
         }
      }

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) 
   {
      R _ret=(R)currscope.get(1);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) 
   {
      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(flag)
      {
         if((String)n.f3.accept(this, argu)!="int")
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) 
   {
      R _ret=n.f1.accept(this, argu);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) 
   {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(flag)
      {
         if((String)n.f1.accept(this, argu)!="boolean")
         {
            error();
         }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) 
   {
      R _ret=n.f1.accept(this, argu);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) 
   {
      R _ret=n.f1.accept(this, argu);;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}