//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	boolean printLabel = false;
   boolean retLabel = false;
   boolean printreg = true;
   String dest = "";
   String movreg = "";
   String op1 = "";
   String op2 = "";
   int goesto = -1;         //for simple expression
   boolean movtosim = false;

	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) 
   {
      R _ret=null;
      System.out.println("\t .text");
      System.out.println("\t .globl \t\t main");
      System.out.println("main:");
      n.f0.accept(this, argu);

      n.f2.accept(this, argu);
      int siz = Integer.parseInt((String)n.f5.accept(this, argu));
      int stack_space = 4*(siz+2);
      //System.out.println(stack_siz);
    
      n.f8.accept(this, argu);
      System.out.print("\t move $fp, $sp\n\t sw $ra, -4($sp)\n\t subu $sp, $sp, "+stack_space+"\n");
      
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      System.out.print("\t addu $sp, $sp, "+stack_space+"\n\t lw $ra, -4($fp)\n\t jal _exitret\n\n");

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);

      String end = "\n\t .text\n\t .globl _halloc\n";
      end+="_halloc:\n\t li $v0, 9\n\t syscall\n\t jr $ra\n\n";
      end+="\t.text\n\t .globl _print\n";
      end+="_print:\n\t li $v0, 1\n\t syscall\n\t la $a0, newl\n\t li $v0, 4\n\t syscall\n\t jr $ra\n\n";
      end+="\t.text\n\t .globl _exitret\n";
      end+="_exitret:\n\t li $v0, 10\n\t syscall\n\n";
      end+="\t .data\n\t .align   0\n";
      end+="newl:\t .asciiz \"\\n\"\n";
      end+="\t .data\n\t .align   0\n";
      end+="str_er:\t.asciiz \" ERROR: abnormal termination\\n\"";
      System.out.print(end);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) 
   {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) 
   {
      R _ret=null;
      System.out.print("\t .text\n\t .globl \t\t");
      n.f0.accept(this, argu);
      System.out.println();
      printLabel = true;
      n.f0.accept(this, argu);
      System.out.println();
      printLabel = false;

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      int siz = Integer.parseInt((String)n.f5.accept(this, argu));
      int stack_space = 4*(siz+2);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      System.out.print("\t sw $fp, -8($sp)\n\t sw $ra, -4($sp)\n\t move $fp, $sp\n\t subu $sp, $sp, "+stack_space+"\n");
      
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.print("\t addu $sp, $sp, "+stack_space+"\n\t lw $ra, -4($fp)\n\t lw $fp, -8($fp)\n\t jr $ra\n\n");
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) 
   {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t nop\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("b str_er\n");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t bne ");
      n.f1.accept(this, argu);
      System.out.print(", 1,");
      n.f2.accept(this, argu);
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t b");
      n.f1.accept(this, argu);
      System.out.println();
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t sw ");
      n.f3.accept(this, argu);
      int offset = Integer.parseInt((String)n.f2.accept(this, argu));
      System.out.print(", "+offset+"(");
      n.f1.accept(this, argu);
      System.out.print(")\n");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t lw ");
      n.f1.accept(this, argu);
      int offset = Integer.parseInt((String)n.f3.accept(this, argu));
      System.out.print(", "+offset+"(");
      n.f2.accept(this, argu);
      System.out.print(")\n");   
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      printreg = false;
      movreg = (String)n.f1.accept(this, argu);
      printreg = true; 
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(goesto == 0)
      {
         System.out.print("\t move $a0, $"+dest+"\n");
      }
      else
      {
         System.out.print("\t li $a0, "+dest+"\n");
      }
      System.out.print("\t jal _print\n"); 
      
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t lw ");
      n.f1.accept(this, argu);
      int t = Integer.parseInt((String)n.f2.accept(this, argu));
      int offset = 4*(t+3);
      System.out.print(", -"+offset+"($fp)\n");

      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.print("\t sw ");
      n.f2.accept(this, argu);
      int t = Integer.parseInt((String)n.f1.accept(this, argu));
      int offset = 4*(t+3);
      System.out.print(", -"+offset+"($fp)\n");

      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      int t = Integer.parseInt((String)n.f1.accept(this, argu));
      int offset = 4*(t+2);
      System.out.print("\t sw ");
      n.f2.accept(this, argu);
      System.out.print(", -"+offset+"($sp)\n");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if(goesto == 0)
      {
         System.out.print("\t jalr $"+dest+"\n");
      }
      else
      {
         System.out.print("\t jal "+dest+"\n");
      }
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) 
   {
      R _ret=null;
      if(n.f0.which == 2)
      {
         movtosim = true;
      }
      n.f0.accept(this, argu);
      movtosim = false;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, null);

      if(goesto == 0)
      {
         System.out.print("\t move $a0, $"+dest+"\n");
      }
      else
      {
         System.out.print("\t li $v1, "+dest+"\n\t move $a0, $v1\n");
      }
      System.out.print("\t jal _halloc\n\t move $"+movreg+", $v0\n");
      
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) 
   {
      R _ret=null;
      printreg = false;
      op1 = (String)n.f1.accept(this, argu);
      printreg = true;
      op2 = (String)n.f2.accept(this, null);
      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) 
   {
      R _ret=null;
      if(goesto == 1)
      {
         System.out.print("\t li $v1, "+op2+"\n");
         op2 = "v1";
      }
      if(n.f0.which == 0)
      {
         System.out.print("\t sle $"+movreg+", $"+op1+", $"+op2+"\n");
      }
      else if(n.f0.which == 1)
      {
         System.out.print("\t sne $"+movreg+", $"+op1+", $"+op2+"\n");
      }
      else if(n.f0.which == 2)
      {
         System.out.print("\t add $"+movreg+", $"+op1+", $"+op2+"\n");
      }
      else if(n.f0.which == 3)
      {
         System.out.print("\t sub $"+movreg+", $"+op1+", $"+op2+"\n");
      }
      else if(n.f0.which == 4)
      {
         System.out.print("\t mult $"+op1+", $"+op2+"\n\t mflo $"+movreg+"\n");
      }
      else if(n.f0.which == 5)
      {
         System.out.print("\t div $"+op1+", $"+op2+"\n\t mflo $"+movreg+"\n");
      }      
      return _ret;
      
      
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) 
   {
      R _ret=null;
      retLabel = true;
      printreg = false;
      dest = (String)n.f0.accept(this, argu);
      _ret = (R) dest;
      goesto = n.f0.which;
      retLabel = false;
      printreg = true;

      if(movtosim)
      {
         if(goesto == 0)
         {
            System.out.print("\t move $"+movreg+", $"+dest+"\n");
         }
         else if(goesto == 1)
         {
            System.out.print("\t li $"+movreg+", "+dest+"\n");            
         }
         else
         {
            System.out.print("\t la $"+movreg+", "+dest+"\n");
         }
      }
      
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) 
   {
      R _ret=null;
      if(printreg)
      {
         System.out.print("$"+n.f0.accept(this, argu));
      }
      _ret = n.f0.accept(this,argu);
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) 
   {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) 
   {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(retLabel)
      {
         return _ret;
      }
      if(printLabel)
      {
         System.out.print(_ret+":\n");
      }
      else
      {
         System.out.print(" "+_ret);
      }
      return _ret;
      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) 
   {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
